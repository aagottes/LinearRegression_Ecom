
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
%matplotlib inline

df = pd.read_csv("Ecommerce_Customers.csv")


TimeOnWebsite_vs_YearlyAmtSpent =  sns.jointplot(df['Time on Website'], df['Yearly Amount Spent'])

TimeOnApp_vs_YearlyAmtSpent = sns.jointplot(df['Time on App'], df['Yearly Amount Spent'])

TimeOnApp_vs_LengthOfMembership = sns.jointplot(x=df['Time on App'], y=df['Length of Membership'], kind="hex", color="#4CB391")

dfPairplot = sns.pairplot(df)


LengthOfMembership_vs_YearlyAmtSpent = sns.lmplot(x='Length of Membership', y = 'Yearly Amount Spent', data=df)


# ## Training and Testing Data

X = df[[ 'Avg. Session Length', 'Time on App',
       'Time on Website', 'Length of Membership']]
y = df['Yearly Amount Spent']

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)

# ## Training the Model

from sklearn.linear_model import LinearRegression
lm = LinearRegression()
lm.fit(X_train, y_train)
lm.coef_
cdf = pd.DataFrame(lm.coef_, X.columns, columns=['Coef'])
print(cdf)

# ##  Test the Model

predictions = lm.predict(X_test)
plt.scatter(y_test,predictions)

# ## Evaluating the Model

from sklearn import metrics
Mean_Abs_Error = metrics.mean_absolute_error(y_test,predictions)
Mean_Sqrd_Error = metrics.mean_squared_error(y_test,predictions)
Root_Mean_Sqrd_Error = np.sqrt(metrics.mean_squared_error(y_test,predictions))


Residuals_Plot = sns.distplot((y_test-predictions))

